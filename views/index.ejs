<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>User Authentication and Portfolio Management</title>
        <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
        <link rel="stylesheet" href="styles.css"> <!-- Your custom styles -->
    </head>
    <body>
        <div class="container">
            <!-- Error Display -->
            <p id="error-message" class="alert alert-danger d-none"></p>
    
            <!-- Sign-up Page -->
            <div id="sign-up-page">
                <h1 class="mt-4">Sign Up</h1>
                <form id="sign-up-form">
                    <input type="text" id="username" class="form-control mb-2" placeholder="Username" required>
                    <input type="email" id="email" class="form-control mb-2" placeholder="Email" required>
                    <input type="password" id="password" class="form-control mb-2" placeholder="Password" required>
                    <input type="text" id="firstName" class="form-control mb-2" placeholder="First Name" required>
                    <input type="text" id="lastName" class="form-control mb-2" placeholder="Last Name" required>
                    <input type="number" id="age" class="form-control mb-2" placeholder="Age" required>
                    <input type="text" id="country" class="form-control mb-2" placeholder="Country" required>
                    <input type="text" id="gender" class="form-control mb-2" placeholder="Gender" required>
                    <button type="submit" class="btn btn-primary">Sign Up</button>
                </form>
            </div>
            
            <!-- Sign-in Page -->
            <div id="sign-in-page">
                <h1 class="mt-4">Sign In</h1>
                <form id="sign-in-form">
                    <input type="email" id="sign-email" class="form-control mb-2" placeholder="Email" required>
                    <input type="password" id="sign-password" class="form-control mb-2" placeholder="Password" required>
                    <button type="submit" class="btn btn-primary">Sign In</button>
                </form>
            </div>
    
            <!-- Portfolio Page -->
            <div id="portfolio-page" class="mt-4" style="display: none;">
                <h1>My Portfolios</h1>
                <div id="portfolio-list" class="mb-3"></div>
                <button id="logout-button" class="btn btn-danger">Logout</button>
                <form id="create-portfolio-form" class="mt-3">
                    <input type="text" id="portfolio-name-en" class="form-control mb-2" placeholder="Portfolio Name (English)" required>
                    <input type="text" id="portfolio-name-ru" class="form-control mb-2" placeholder="Portfolio Name (Russian)" required>
                    <textarea id="portfolio-description-en" class="form-control mb-2" placeholder="Portfolio Description (English)" required></textarea>
                    <textarea id="portfolio-description-ru" class="form-control mb-2" placeholder="Portfolio Description (Russian)" required></textarea>
                    <button type="submit" class="btn btn-primary">Create Portfolio</button>
                </form>
            </div>
        </div>
    
        <!-- Bootstrap JS (Optional) -->
        <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@1.16.1/dist/umd/popper.min.js"></script>
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

    <script>
        // Function to handle form submission for sign-up
        document.getElementById('sign-up-form').addEventListener('submit', async (event) => {
            event.preventDefault();
            const userData = {
                username: document.getElementById('username').value,
                email: document.getElementById('email').value,
                password: document.getElementById('password').value,
                firstName: document.getElementById('firstName').value,
                lastName: document.getElementById('lastName').value,
                age: document.getElementById('age').value,
                country: document.getElementById('country').value,
                gender: document.getElementById('gender').value
            };
            const response = await fetch('/api/v1/sign-up', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(userData)
            });
            const data = await response.json();
            if (response.ok) {
                // Successful sign-up, redirect or display a success message
                console.log('Sign-up successful:', data);
            } else {
                // Display error message to the user
                document.getElementById('error-message').textContent = data.err;
                document.getElementById('error-message').style.display = 'block';
                console.error('Sign-up failed:', data.err);
            }
        });

        // Function to handle form submission for sign-in
        document.getElementById('sign-in-form').addEventListener('submit', async (event) => {
            event.preventDefault();
            const userData = {
                email: document.getElementById('sign-email').value,
                password: document.getElementById('sign-password').value
            };
            
            const response = await fetch('/api/v1/sign-in', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(userData)
            });
            const data = await response.json();
            if (response.ok) {
                // Successful sign-in, store the token and reload the page
                const token = data.token;
                localStorage.setItem('token', token); // Store the token locally
                location.reload(); // Reload the page
                console.log('Sign-in successful. Token:', token);
            } else {
                // Display error message to the user
                document.getElementById('error-message').textContent = data.err;
                document.getElementById('error-message').style.display = 'block';
                console.error('Sign-in failed:', data.err);
            }
        });

        // Function to handle form submission for creating portfolio
        document.getElementById('create-portfolio-form').addEventListener('submit', async (event) => {
            event.preventDefault();
            const token = localStorage.getItem('token');
            if (!token) {
                console.error('User not authenticated.');
                return;
            }
            const portfolioData = {
                names: {
                    ru: document.getElementById('portfolio-name-ru').value,
                    en: document.getElementById('portfolio-name-en').value
                },
                descriptions: {
                    ru: document.getElementById('portfolio-description-ru').value,
                    en: document.getElementById('portfolio-description-en').value
                }
            };
            const response = await fetch('/api/v1/portfolio', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': token
                },
                body: JSON.stringify(portfolioData)
            });
            const data = await response.json();
            if (response.ok) {
                // Portfolio created successfully, fetch and display portfolios again
                fetchPortfolios(token);
                console.log('Portfolio created successfully:', data);
            } else {
                // Display error message to the user
                document.getElementById('error-message').textContent = data.err;
                document.getElementById('error-message').style.display = 'block';
                console.error('Failed to create portfolio:', data.err);
            }
        });

        // Function to fetch and display portfolios
        async function fetchPortfolios(token) {
            const response = await fetch('/api/v1/portfolio', {
                method: 'GET',
                headers: {
                    'Authorization': token
                }
            });
            const portfolios = await response.json();
            if (response.ok) {
                // Display portfolios to the user
                console.log('Portfolios:', portfolios);
                const portfolioList = document.getElementById('portfolio-list');
                portfolioList.innerHTML = ''; // Clear existing portfolio list
                portfolios.forEach(portfolio => {
                    const portfolioItem = document.createElement('div');
                    portfolioItem.textContentRu = `${portfolio.names.ru}: ${portfolio.descriptions.ru}`;
                    portfolioItem.textContentEn = `${portfolio.names.en}: ${portfolio.descriptions.en}`;
                    portfolioList.appendChild(portfolioItem);
                });
                // Show the portfolio page
                document.getElementById('portfolio-page').style.display = 'block';
            } else {
                // Display error message to the user
                document.getElementById('error-message').textContent = portfolios.err;
                document.getElementById('error-message').style.display = 'block';
                console.error('Failed to fetch portfolios:', portfolios.err);
            }
        }

        // Logout Functionality
        document.getElementById('logout-button').addEventListener('click', () => {
            localStorage.removeItem('token'); // Remove token from localStorage
            location.reload(); // Reload the page
        });

        // Check if the user is already authenticated
        const token = localStorage.getItem('token');
        if (token) {
            // If token exists, fetch and display portfolios
            fetchPortfolios(token);
        } else {
            // Show the sign-in page
            document.getElementById('sign-in-page').style.display = 'block';
        }
    </script>
</body>
</html>
